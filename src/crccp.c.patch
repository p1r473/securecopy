--- cp.c
+++ crccp.c
@@ -38,11 +38,13 @@
 #include "acl.h"
 
 /* The official name of this program (e.g., no 'g' prefix).  */
-#define PROGRAM_NAME "cp"
+/* HIJN */
+#define PROGRAM_NAME "crccp"
 
 #define AUTHORS \
   proper_name_lite ("Torbjorn Granlund", "Torbj\303\266rn Granlund"), \
   proper_name ("David MacKenzie"), \
-  proper_name ("Jim Meyering")
+  proper_name ("Jim Meyering"), \
+  proper_name ("Checksum functionality only: Hans IJntema")
 
 /* Used by do_copy, make_dir_parents_private, and re_protect
@@ -114,6 +116,9 @@
   {"attributes-only", no_argument, nullptr, ATTRIBUTES_ONLY_OPTION},
   {"backup", optional_argument, nullptr, 'b'},
   {"copy-contents", no_argument, nullptr, COPY_CONTENTS_OPTION},
+  /* HIJN */
+  {"crc", optional_argument, nullptr, 'c'},
+  {"crc-force", no_argument, nullptr, 'C'},
   {"debug", no_argument, nullptr, DEBUG_OPTION},
   {"dereference", no_argument, nullptr, 'L'},
   {"force", no_argument, nullptr, 'f'},
@@ -170,6 +175,12 @@
 \n\
   -b                           like --backup but does not accept an argument\n\
       --copy-contents          copy contents of special files when recursive\n\
+  -c --crc[=x]                 check whether copy was successfull with checksum comparison\n\
+                               x: use (fresh) checksum stored in xattr or if not present,\n\
+                               store checksum in xattr of src and des\n\
+                               See also tool <crcsum> in same secure copy package\n\
+                               implies --preserve=all\n\
+  -C --crc-force               always validate CRC, even if mtime unchanged (use with -cx)\n\
   -d                           same as --no-dereference --preserve=links\n\
 "), stdout);
       fputs (_("\
@@ -826,6 +837,11 @@
 {
   cp_options_default (x);
   x->copy_as_regular = true;
+  /* HIJN */
+  x->crc = false;
+  x->crc_with_xattr = false;
+  x->crc_force_validate = false;
+  /* END HIJN */
   x->dereference = DEREF_UNDEFINED;
   x->unlink_dest_before_opening = false;
   x->unlink_dest_after_failed_open = false;
@@ -995,7 +1011,8 @@
   selinux_enabled = (0 < is_selinux_enabled ());
   cp_option_init (&x);
 
-  while ((c = getopt_long (argc, argv, "abdfHilLnprst:uvxPRS:TZ",
+  /* HIJN */
+  while ((c = getopt_long (argc, argv, "abc::CdfHilLnprst:uvxPRS:TZ",
                            long_opts, nullptr))
          != -1)
     {
@@ -1064,6 +1081,43 @@
             version_control_string = optarg;
           break;
 
+        /* HIJN */
+        case 'c':
+          if (optarg)
+          {
+            if (strcmp(optarg, "x") == 0 || (optarg[0] == 'x' && strchr("CabdfHilLnprst:uvxPRS:TZ", optarg[1])))
+            {
+              x.crc_with_xattr = true;
+              x.crc = false;
+
+              // will this stick if --no-preserve=xattr?
+              x.preserve_mode = true;
+              x.preserve_timestamps = true;
+              x.preserve_ownership = true;
+              x.preserve_links = true;
+              x.explicit_no_preserve_mode = false;
+              if (selinux_enabled)
+                x.preserve_security_context = true;
+              x.preserve_xattr = true;
+              
+              // If optarg is "xC", also set crc_force_validate
+              if (strcmp(optarg, "xC") == 0)
+                x.crc_force_validate = true;
+            }
+          }
+          else
+          {
+            x.crc = true;
+            x.crc_with_xattr = false;
+          }
+          break;
+        /* END HIJN */
+
+        /* HIJN */
+        case 'C':
+          x.crc_force_validate = true;
+          break;
+
         case ATTRIBUTES_ONLY_OPTION:
           x.data_copy_required = false;
           break;
@@ -1240,6 +1294,13 @@
         }
     }
 
+  /* HIJN - Validate that -C is used with -c */
+  if (x.crc_force_validate && !x.crc && !x.crc_with_xattr)
+    {
+      error (0, 0, _("-C (--crc-force) requires -c or -cx to be specified"));
+      usage (EXIT_FAILURE);
+    }
+
   /* With --sparse=never, disable reflinking so we create a non sparse copy.
      This will also have the effect of disabling copy offload as that may
      propagate holes.  For e.g. FreeBSD documents that copy_file_range()

